volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  open-webui:
  pgadmin_data:

networks:
  demo:
    driver: bridge
    internal: true # Make this network isolated
  external_net:
    driver: bridge
    internal: false # This network can access the internet

x-n8n: &service-n8n
  image: n8nio/n8n:1.91.3
  networks:
    - demo
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks:
    - demo
    - external_net
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:11434/"]
    interval: 10s
    timeout: 5s
    retries: 10
  #environment:
    # experimental features to decrease RAM usage:
    #- OLLAMA_FLASH_ATTENTION=true
    #- OLLAMA_KV_CACHE_TYPE=f16
    #- OLLAMA_MAX_LOADED_MODELS=1

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks:
    - demo
    - external_net
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    # https://gist.github.com/ibnbd/5ec32ce14bde8484ca466b7d77e18764#best-practices
    - |
      # Wait for Ollama service to be ready
      sleep 3
      
      # Pull large language models
      OLLAMA_HOST=ollama:11434 ollama pull mistral-small3.1:24b
      OLLAMA_HOST=ollama:11434 ollama pull qwen3:30b-a3b-q4_K_M
      OLLAMA_HOST=ollama:11434 ollama pull qwen2.5vl:32b
      OLLAMA_HOST=ollama:11434 ollama pull gemma3:12b-it-qat
      #OLLAMA_HOST=ollama:11434 ollama pull devstral:24b
      
      # Pull embedding model
      OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text

services:
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks:
      - demo
      - external_net
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
      - ./open-webui-functions-for-import.json:/app/backend/functions-export.json:ro
    environment:
      - DEFAULT_LOCALE=en
      - WEBUI_ADMIN_EMAIL=${WEBUI_ADMIN_EMAIL}
      - WEBUI_ADMIN_USER=${WEBUI_ADMIN_USER}
      - WEBUI_ADMIN_PASS=${WEBUI_ADMIN_PASS}
    entrypoint:
      - bash
      - -c
      - |
        echo "Starting Open WebUI server..."
        /app/backend/start.sh &
        
        # Wait for Open WebUI API to become available
        echo "Waiting for Open WebUI to start..."
        while ! curl -s -o /dev/null "http://localhost:8080/health"; do
          sleep 2;
        done
        echo "Open WebUI started successfully"
        
        # Sign up default admin user
        echo "Creating default admin user..."
        SIGNUP_RESPONSE=$$(curl -s -X POST "http://localhost:8080/api/v1/auths/signup" \
          -H "Content-Type: application/json" \
          --data-raw "{\"name\":\"$${WEBUI_ADMIN_USER}\", \"email\":\"$${WEBUI_ADMIN_EMAIL}\", \"password\":\"$${WEBUI_ADMIN_PASS}\"}")
        
        API_KEY=$$(echo "$${SIGNUP_RESPONSE}" | jq -r '.token')
        echo "Received API_KEY for function import"
        
        # Import functions from JSON file
        if [ -f "/app/backend/functions-export.json" ]; then
          echo "Importing functions from JSON file..."
          FUNCTIONS_DATA=$$(cat /app/backend/functions-export.json)
          
          # Parse and import each function from the JSON array
          echo "$${FUNCTIONS_DATA}" | jq -c '.[]' | while read -r function_data; do
            FUNCTION_NAME=$$(echo "$${function_data}" | jq -r '.name')
            echo "Importing function: $${FUNCTION_NAME}"
            
            curl -s -X POST "http://localhost:8080/api/v1/functions/create" \
              -H "Authorization: Bearer $${API_KEY}" \
              -H "Content-Type: application/json" \
              --data-raw "$${function_data}" || echo "Failed to import function: $${FUNCTION_NAME}"
          done
          echo "Function import process completed"
        else
          echo "No functions export file found at /app/backend/functions-export.json"
        fi
        
        # Keep the container running
        wait

  postgres:
    image: pgvector/pgvector:pg16
    networks:
      - demo
    restart: unless-stopped
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 20

  pgadmin:
    image: dpage/pgadmin4:9.3.0
    container_name: pgadmin
    networks:
      - demo
      - external_net
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        n8n import:workflow --input=/backup/AI_Agent_With_Knowledge_Base_Main.json
        n8n import:workflow --input=/backup/AI_Agent_With_Knowledge_Base_Final.json
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    networks:
      - demo
      - external_net
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  docling:
    image: quay.io/docling-project/docling-serve
    container_name: docling-serve
    networks:
      - demo
      - external_net
    restart: unless-stopped
    ports:
      - 5001:5001
    environment:
      - DOCLING_SERVE_ENABLE_UI=true
      - DOCLING_SERVE_MAX_DOCUMENT_TIMEOUT=1800 # 30 minutes
      - DOCLING_SERVE_MAX_SYNC_WAIT=2100 # 35 minutes
      #- DOCLING_SERVE_MAX_NUM_PAGES=50
      #- DOCLING_SERVE_MAX_FILE_SIZE=15728640 # 15MB
    depends_on:
      - n8n