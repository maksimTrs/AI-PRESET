volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  pgadmin_data:

networks:
  demo:
    driver: bridge
    internal: true # Make this network isolated
  external_net:
    driver: bridge
    internal: false # This network can access the internet

x-n8n: &service-n8n
  image: n8nio/n8n:1.91.3
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:0.6.8
  container_name: ollama
  networks:
    - demo
    - external_net
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:0.6.8
  networks:
    - demo
    - external_net
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    # https://gist.github.com/ibnbd/5ec32ce14bde8484ca466b7d77e18764#best-practices
    - |
      # Wait for Ollama service to be ready
      sleep 3
      
      # Pull large language models
      OLLAMA_HOST=ollama:11434 ollama pull qwen3:30b-a3b-q4_K_M
      OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:14b-instruct-q4_K_M
      OLLAMA_HOST=ollama:11434 ollama pull gemma3:12b-it-qat
      #OLLAMA_HOST=ollama:11434 ollama pull gemma3:27b-it-qat
      #OLLAMA_HOST=ollama:11434 ollama pull deepseek-r1:14b
      #OLLAMA_HOST=ollama:11434 ollama pull qwen2.5-coder:14b
      #OLLAMA_HOST=ollama:11434 ollama pull deepseek-coder-v2:16b
      #OLLAMA_HOST=ollama:11434 ollama pull starcoder2:7b
      
      # Pull embedding model
      OLLAMA_HOST=ollama:11434 ollama pull mxbai-embed-large

services:
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks:
      - demo
      - external_net
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
    environment:
      - WEBUI_AUTH=false

  postgres:
    image: pgvector/pgvector:pg16
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 20

  pgadmin:
    image: dpage/pgadmin4:9.3.0
    container_name: pgadmin
    networks:
      - demo
      - external_net
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    networks:
      - demo
      - external_net
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant:v1.14.0
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
